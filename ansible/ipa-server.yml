- name: Install FreeIPA server on Rocky
  hosts: rocky
  become: true
  vars_files:
    - vars.yml
  vars:
    ipa_base_domain: "evgenii.org" # parent domain managed at Cloudflare
    ipa_subdomain: "lab" # delegated to FreeIPA (NS lab -> ipa.lab.evgenii.org)
    app_host: "app" # inventory hostname of the application server

  pre_tasks:
    - name: Compose IPA DNS settings from vars
      set_fact:
        ipa_domain: "{{ ipa_subdomain }}.{{ ipa_base_domain }}"
        ipa_realm: "{{ (ipa_subdomain + '.' + ipa_base_domain) | upper }}"
        ipa_fqdn: "ipa.{{ ipa_subdomain }}.{{ ipa_base_domain }}"

    - debug:
        msg: "Using FQDN {{ ipa_fqdn }} (domain {{ ipa_domain }}, realm {{ ipa_realm }})"

    - name: Check if IPA already installed
      stat:
        path: /etc/ipa/default.conf
      register: ipa_conf

  tasks:
    - name: Set hostname only if needed
      ansible.builtin.hostname:
        name: "{{ ipa_fqdn }}"

    - name: Ensure /etc/hosts has self mapping for FQDN (bootstrap)
      lineinfile:
        path: /etc/hosts
        line: "{{ ansible_default_ipv4.address | default(ansible_host) }} {{ ipa_fqdn }} {{ ipa_fqdn.split('.')[0] }}"
        state: present
        create: yes

    - name: Ensure epel-release is installed before certbot
      dnf:
        name: epel-release
        state: present

    - name: Ensure base packages
      dnf:
        name:
          - freeipa-server
          - freeipa-server-dns
          - freeipa-healthcheck
          - firewalld
          - certbot
        state: present

    - name: Enable & start firewalld
      service:
        name: firewalld
        state: started
        enabled: true

    - name: Open FreeIPA services (with DNS)
      firewalld:
        service: "{{ item }}"
        permanent: true
        immediate: true
        state: enabled
      loop:
        - dns
        - freeipa-ldap
        - freeipa-ldaps
        - http
        - https
        - kerberos
        - ntp

    - name: Run ipa-server-install with integrated DNS
      no_log: true
      command: >
        ipa-server-install -U
        --setup-dns
        --realm {{ ipa_realm }}
        --domain {{ ipa_domain }}
        --hostname {{ ipa_fqdn }}
        --ds-password {{ ipa_ds_password }}
        --admin-password {{ ipa_admin_password }}
        --forwarder 1.1.1.1 --forwarder 8.8.8.8
      args:
        creates: /etc/ipa/default.conf
      when: not ipa_conf.stat.exists

    - name: Obtain Kerberos ticket for admin
      no_log: true
      shell: echo "{{ ipa_admin_password }}" | kinit admin
      changed_when: false

    - name: Check if DNS A record for app exists in IPA
      command: ipa dnsrecord-show {{ ipa_domain }} app
      register: ipa_app_dns
      failed_when: false
      changed_when: false

    - name: Create DNS A record for app.lab with inventory IP
      command: ipa dnsrecord-add {{ ipa_domain }} app --a-rec {{ hostvars[app_host].ansible_host }}
      when: ipa_app_dns.rc != 0

    - name: Check presence of users
      command: ipa user-show {{ item.name }}
      register: ipa_user_check
      failed_when: false
      changed_when: false
      loop:
        - {
            name: "user1",
            pass: "{{ user1_pass }}",
            first: "User",
            last: "One",
          }
        - {
            name: "user2",
            pass: "{{ user2_pass }}",
            first: "User",
            last: "Two",
          }
        - {
            name: "user3",
            pass: "{{ user3_pass }}",
            first: "User",
            last: "Three",
          }

    - name: Create missing users
      no_log: true
      shell: |
        echo '{{ item.item.pass }}' | ipa user-add {{ item.item.name }} --first={{ item.item.first }} --last={{ item.item.last }} --password
      when: item.rc != 0
      loop: "{{ ipa_user_check.results }}"

    - name: Show IPA config path (sanity)
      stat:
        path: /etc/ipa/default.conf
      register: ipa_cfg
    - debug:
        msg: "IPA installed: {{ ipa_cfg.stat.exists }} (config at /etc/ipa/default.conf)"

    # 2) Get/renew cert (standalone; auto-stops httpd while validating)
    - name: Obtain/renew LE cert for ipa.lab.evgenii.org
      command: >
        certbot certonly --standalone
        -d ipa.lab.evgenii.org
        --agree-tos -m {{ letsencrypt_email }}
        --non-interactive --keep-until-expiring
        --pre-hook "systemctl stop httpd"
        --post-hook "systemctl start httpd"
      args:
        creates: /etc/letsencrypt/live/ipa.lab.evgenii.org/fullchain.pem

    # 3) Install into FreeIPA + set a deploy hook for future renewals
    - name: Install cert and set renew hook
      copy:
        dest: /etc/letsencrypt/renewal-hooks/deploy/99-freeipa-http.sh
        mode: "0755"
        content: |
          #!/bin/bash
          if [[ "$RENEWED_LINEAGE" == "/etc/letsencrypt/live/ipa.lab.evgenii.org" ]]; then
            ipa-server-certinstall -U -w \
              --http-cert-file "$RENEWED_LINEAGE/fullchain.pem" \
              --http-key-file  "$RENEWED_LINEAGE/privkey.pem"
            systemctl restart httpd
          fi
