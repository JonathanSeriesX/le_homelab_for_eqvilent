- hosts: ipa
  become: true
  tasks:
    - dnf:
        {
          name: ["freeipa-server", "freeipa-server-dns", "firewalld"],
          state: present,
        }
    - service: { name: firewalld, state: started, enabled: true }
    - command: >
        ipa-server-install -U --realm EXAMPLE.LOCAL --domain example.local
        --hostname ipa.example.local
        --ds-password Directory_Manager_P@ss --admin-password Admin_P@ss
        --setup-dns --auto-forwarders --no-reverse
      args: { creates: /etc/ipa/default.conf }
    - shell: echo Admin_P@ss | kinit admin
    - shell: echo 'User1Pass!' | ipa user-add user1 --first=User --last=One --password || true
    - shell: echo 'User2Pass!' | ipa user-add user2 --first=User --last=Two --password || true
    - shell: echo 'User3Pass!' | ipa user-add user3 --first=User --last=Three --password || true
    - shell: |
        ipa hbacrule-add allow-ssh-to-app || true
        ipa hbacrule-mod allow-ssh-to-app --hostcat=none
        ipa hbacrule-add-host allow-ssh-to-app --hosts=app.example.local
        ipa hbacrule-mod allow-ssh-to-app --servicecat=none
        ipa hbacrule-add-service allow-ssh-to-app --hbacsvcs=sshd
        ipa hbacrule-add-user allow-ssh-to-app --users=user1
        ipa hbacrule-add-user allow-ssh-to-app --users=user2
        ipa hbacrule-add-user allow-ssh-to-app --users=user3

- hosts: app
  become: true
  tasks:
    - dnf: { name: ["freeipa-client", "NetworkManager"], state: present }
    - shell: nmcli con mod "$(nmcli -g NAME con show --active | head -n1)" ipv4.ignore-auto-dns yes ipv4.dns "IPA_PRIVATE_IP" ipv4.method auto
    - shell: nmcli con up "$(nmcli -g NAME con show --active | head -n1)"
    - command: ipa-client-install -U --domain example.local --server ipa.example.local --mkhomedir -p admin -w Admin_P@ss
      args: { creates: /etc/ipa/default.conf }
    - dnf: { name: ["lvm2", "acl", "dnf-plugins-core"], state: present }
    - shell: |
        PV=/dev/$(ls -l /dev/disk/by-id/ | awk '/Linode_Volume_app-data/ {print $NF}' | xargs readlink -f | xargs basename)
        pvcreate /dev/$PV || true
        vgcreate vg_app /dev/$PV || true
        lvcreate -n lv_app -l 100%FREE vg_app || true
        mkfs.xfs -f /dev/vg_app/lv_app
        mkdir -p /app
        grep -q vg_app /etc/fstab || echo '/dev/vg_app/lv_app /app xfs defaults 0 0' >> /etc/fstab
        mount -a
    - shell: |
        dnf config-manager --add-repo https://download.docker.com/linux/rhel/docker-ce.repo
        dnf -y install docker-ce docker-ce-cli containerd.io
    - copy:
        dest: /etc/docker/daemon.json
        content: '{ "data-root": "/app" }'
    - service: { name: docker, state: started, enabled: true }
    - shell: |
        setfacl -m u:user1:r-x /app
        setfacl -m u:user2:rwx /app
        setfacl -m u:user3:rwx /app
        setfacl -d -m u:user1:r-x /app
        setfacl -d -m u:user2:rwx /app
        setfacl -d -m u:user3:rwx /app
